Report

1.Show the percentage of wins of each bidder in the order of highest to lowest percentage.

Query:
select bd.bidder_id, ibd.bidder_name, 
count(case when bid_status = 'Won' then 1 end)/ count(bid_status) * 100 as win_percentage
from ipl_bidding_details bd inner join ipl_bidder_details ibd
on bd.bidder_id = ibd.bidder_id
group by bidder_id order by win_percentage desc;
Output :

Conclusion :
The query shows the wins of each bidder in percentage from highest to lowest. It calculates the total number of wins against the total number of bidding done by each bidder and shows it in percentage from highest to lowest.

2.Display the number of matches conducted at each stadium with the stadium name and city.

Query: 
SELECT ips.STADIUM_ID,ips.STADIUM_NAME,ips.CITY,count(im.MATCH_ID) as NO_OF_MATCHES from ipl_stadium ips
LEFT JOIN ipl_match_schedule im on ips.STADIUM_ID=im.STADIUM_ID
GROUP BY ips.STADIUM_ID,ips.STADIUM_NAME,ips.CITY
ORDER BY NO_OF_MATCHES desc;

Output:



Conclusion:
From the above result we can understand that the maximum number of matches were conducted in Wankhede Stadium.


3.In a given stadium, what is the percentage of wins by a team which has won the toss?

Query:

use ipl;
Select * from ipl_match;
Select * from ipl_match_schedule;
Select * from ipl_stadium;
select   s.stadium_name, 
(COUNT(CASE WHEN im.toss_winner = im.match_winner THEN 1 END) * 100 / COUNT(*)) AS win_percentage 
from ipl_match  im
inner join ipl_match_schedule ims on ims.MATCH_ID = im.MATCH_ID
INNER JOIN ipl_stadium s on s.STADIUM_ID = ims.STADIUM_ID 
group by s.stadium_name
order by win_percentage desc;

Output:


Conclusion:

The above query shows the percentage of wins of the teams which has won toss in the given stadiums  


4.Show the total bids along with the bid team and team name.

Query:

      use ipl;
SELECT   B.Bid_Team,
T.Team_name AS Team_name,
COUNT(*) AS Total_Bids
FROM 
IPL_Bidding_Details B
JOIN 
IPL_Team T ON B.Bid_Team = T.Team_Id
GROUP BY 
B.Bid_Team, T.Team_name
ORDER BY 
Total_Bids DESC;

Output:


Bid_Team	Team_name	Total_Bids
8	Sunrisers Hyderabad	32
6	Rajasthan Royals	27
2	Delhi Daredevils	26
7	Royal Challengers Bangalore	25
3	Kings XI Punjab	24
1	Chennai Super Kings	22
5	Mumbai Indians	22
4	Kolkata Knight Riders	22


Conclusion:
The above query shows the total bids on the bid team with the team name.It calculates all bids on the team and gives the number of total bids.

5.Show the team id who won the match as per the win details.

Query:

#Tables Used:
SELECT * FROM  ipl_match;
SELECT * FROM  ipl_team; 

SELECT 
mat.TEAM_ID1 AS Team_ID,
mat.WIN_DETAILS
FROM 
ipl_match mat
INNER JOIN 
ipl_team tea ON mat.TEAM_ID1 = tea.TEAM_ID;

Output:


Conclusion:  
This SQL query retrieves the team ID and win details from the ipl_match table.
It joins the ipl_match table with the ipl_team table based on the team ID present in both tables. 
The output includes the team ID of the team that won the match as per the win details.

6.Display total matches played, total matches won and total matches lost by the team along with its team name.

Query:
use ipl;
SELECT t.team_name,t.team_id, 
SUM(matches_played) AS total_matches_played,
SUM(matches_won) AS total_matches_won,
 SUM(matches_lost) AS total_matches_lost
FROM ipl_team_standings
JOIN ipl_team t ON t.team_id = t.team_id
WHERE t.team_id IN (1, 2, 3, 4, 5, 7, 8)
GROUP BY team_id,t.team_name;
Output:
team_name	team_id	total_matches_played	total_matches_won	total_matches_loss
Sunrisers Hyderabad	8	224	116	106
Royal Challengers Bangalore	7	224	116	106
Mumbai Indians	5	224	116	106
Kolkata Knight Riders	4	224	116	106
Kings XI Punjab	3	224	116	106
Delhi Daredevils	2	224	116	106
Chennai Super Kings	1	224	116	106


Conclusion:
Above query shows the matches played by each team with team id. It displays wins and loss of each team 

7.Display the bowlers for the Mumbai Indians team.

Query:

select * from IPL_Team_players;
select * from IPL_Team_players where remarks='TEAM - MI' and player_role='bowler'
order by player_id;

Output:


Conclusion:
Above query shows the bowler of Mumbai Indians team and their player ID .

8.How many all-rounders are there in each team, Display the teams with more than 4 all-rounders in descending order.

Query:
SELECT it.TEAM_ID,it.TEAM_NAME,count(itp.PLAYER_ID) as ALL_ROUNDERS 
FROM ipl_team_players itp
INNER JOIN ipl_team it on itp.TEAM_ID=it.TEAM_ID
WHERE itp.PLAYER_ROLE='All-Rounder'
GROUP BY it.TEAM_ID,it.TEAM_NAME;

Output:


Problem Statement:

Display the teams with more than 4 all-rounders in descending order.

Query:

SELECT it.TEAM_ID,it.TEAM_NAME,count(itp.PLAYER_ID) as ALL_ROUNDERS 
FROM ipl_team_players itp
INNER JOIN ipl_team it on itp.TEAM_ID=it.TEAM_ID
WHERE itp.PLAYER_ROLE='All-Rounder'
GROUP BY it.TEAM_ID,it.TEAM_NAME
HAVING ALL_ROUNDERS >4
ORDER BY ALL_ROUNDERS DESC;

Output:



Conclusion: 
From the above result we get the top 5 team with the greatest number of all-rounders.


9.Write a query to get the total bidders points for each bidding status of those bidders who bid on CSK when it won the match in M. Chinnaswamy Stadium bidding year-wise.Note the total bidders’ points in descending order and the year is bidding year.Display columns: bidding status, bid date as year, total bidder’s points
Query:
select bd.BID_STATUS,year(bd.BID_DATE) as Year,tp.TOTAL_POINTS
from ipl_bidding_details bd inner join ipl_bidder_points tp
on bd.BIDDER_ID=tp.BIDDER_ID
inner join ipl_match_schedule sd
on bd.SCHEDULE_ID=sd.SCHEDULE_ID
inner join ipl_match mt
on sd.MATCH_ID=mt.MATCH_ID
inner join ipl_team tm
on mt.MATCH_WINNER=tm.TEAM_ID
inner join ipl_stadium std
on sd.STADIUM_ID=std.STADIUM_ID
where tm.REMARKS='CSK' and mt.TEAM_ID1=mt.MATCH_WINNER and std.STADIUM_NAME like '%Chinnaswamy %';

Output :


Conclusion :
The query returns the total bidders points for each bidders status of those bidders who bid on CSK when it won match on Chinnaswamy stadium. It calculates the total bidders points according to the condition and the output includes bid status, year and total points.

10.Extract the Bowlers and All Rounders those are in the 5 highest number of wickets:
1.use the performance_dtls column from ipl_player to get the total number of wickets.
2.Do not use the limit method because it might not give appropriate results when players have the same number of wickets.
3.Display the following columns team_name, player_name, and player_role.

Query:

SELECT * from 
(SELECT *, dense_rank() over(order by WICKETS DESC) as PLAYER_RANK from
(SELECT it.TEAM_NAME,a.PLAYER_NAME,b.PLAYER_ROLE,
cast(substring_index(substr(performance_dtls,locate("Wkt",performance_dtls),6),"-",-1) as signed) as WICKETS
FROM ipl_player a
LEFT JOIN ipl_team_players b on a.player_id=b.player_id
LEFT JOIN ipl_team it on it.TEAM_ID=b.TEAM_ID) as output) as op
WHERE op.PLAYER_ROLE in ('All-Rounder','Bowler') and op.PLAYER_RANK<=5;

Output:



Conclusion: 
From the above result, we get the top 5 players who has the highest number of wickets.



11.show the percentage of toss wins of each bidder and display the results in descending order based on the percentage;
Query:
select bt.BIDDER_ID, bt.BIDDER_NAME,
count(if((mt.TEAM_ID1=bd.BID_TEAM and mt.TOSS_WINNER=1) or
(mt.TEAM_ID2=bd.BID_TEAM and mt.TOSS_WINNER=2),1,null))/count(*)*100 as Toss_Winning_Percent
from ipl_match mt inner join ipl_match_schedule sdl
on mt.MATCH_ID=sdl.MATCH_ID
inner join ipl_bidding_details bd
on sdl.SCHEDULE_ID =bd.SCHEDULE_ID
inner join ipl_bidder_details bt
on bd.BIDDER_ID=bt.BIDDER_ID
inner join ipl_bidder_points pt
on bt.BIDDER_ID=pt.BIDDER_ID
group by bt.BIDDER_ID,bt.BIDDER_NAME
order by Toss_Winning_Percent desc;
Output:


Conclusion :
The query returns the toss wins percentage of each bidder in descending order by counting the total number time toss won when bidder bid against the count of total bidding done by the bidder. The output has bidder_id, bidder_name and toss_winning_percent columns.

12.find the IPL season which has min duration and max duration.
Output columns should be like the below: Tournment_ID, Tourment_name, Duration column, Duration

Query:
SELECT * FROM  ipl_tournament;
SELECT 
Tournmt_ID, 
Tournmt_name, 
CASE
WHEN DATEDIFF(TO_DATE, FROM_DATE) = (SELECT MAX(DATEDIFF(TO_DATE, FROM_DATE)) FROM IPL_Tournament) THEN 'Max_duration'
WHEN DATEDIFF(TO_DATE, FROM_DATE) = (SELECT MIN(DATEDIFF(TO_DATE, FROM_DATE)) FROM IPL_Tournament) THEN 'Min_duration'
END AS Duration_Column,
DATEDIFF(TO_DATE, FROM_DATE) AS Duration
FROM 
IPL_Tournament
HAVING 
Duration_Column IS NOT NULL;

Output:


Conclusion:
This classification is indicated in the "Duration_Column" column, which will show either "Max_duration" or "Min_duration" based on the comparison of each tournament's duration with the maximum and minimum durations found in the dataset.


13.Write a query to display to calculate the total points month-wise for the 2017 bid year. sort the results based on total points in descending order and month-wise in ascending order.
Note: Display the following columns:
1.Bidder ID, 2. Bidder Name, 3. bid date as Year, 4. bid date as Month, 5. Total points
Only use joins for the above query queries.

Query:
       select * from ipl_bidder_details;
       select * from ipl_bidding_details;
       select * from ipl_bidder_points;

select bd.BIDDER_ID, BIDDER_NAME,YEAR(ibd.BID_DATE) as BID_YEAR, MONTH(ibd.BID_DATE) as BID_MONTH, Sum(TOTAL_POINTS) as TOTAl_POINTS from ipl_bidder_details bd
inner join ipl_bidding_details ibd on bd.Bidder_ID = ibd.Bidder_ID
Inner Join ipl_bidder_points ibp on bd.Bidder_ID = ibp.Bidder_ID
WHERE YEAR(ibd.BID_DATE) = 2017
group by bd.BIDDER_ID, BIDDER_NAME,YEAR(ibd.BID_DATE) , MONTH(ibd.BID_DATE) 
order by TOTAL_POINTS DESC  , BID_MONTH asc, BID_YEAR asc;

Output:


Conclusion:
Using above join queries the information needed is filtered out .It shows the total bidding points,name of bidder and bid month from the 2017 year.

Write a query to display to calculate the total points month-wise for the 2017 bid year. sort the results based on total points in descending order and month-wise in ascending order.
Note: Display the following columns:
1.Bidder ID, 2. Bidder Name, 3. bid date as Year, 4. bid date as Month, 5. Total points
2.Write a query for the above question using sub queries by having the same constraints as the above question.
Query:
SELECT
BDR.Bidder_Id,
BDR.Bidder_name,
YEAR(BD.Bid_Date) AS Year
MONTH(BD.Bid_Date) AS Month
(
SELECT
SUM(CASE WHEN BD1.Bid_Status = 'Won' THEN 2
WHEN BD1.Bid_Status = 'Lost' THEN 1 ELSE 0 END)
FROM
IPL_Bidding_Details BD1
WHERE
BD1.Bidder_Id = BDR.Bidder_Id
AND YEAR(BD1.Bid_Date) = 2017
AND MONTH(BD1.Bid_Date) = MONTH(BD.Bid_Date)
) AS Total_Points
FROM
IPL_Bidding_Details BD
JOIN
IPL_Bidder_Details BDR ON BD.Bidder_Id = BDR.Bidder_Id
WHERE
YEAR(BD.Bid_Date) = 2017
GROUP BY
BDR.Bidder_Id,
BDR.Bidder_name,
YEAR(BD.Bid_Date),
MONTH(BD.Bid_Date),
BD.Bid_Date
ORDER BY
Total_Points DESC, Year ASC, Month ASC;

Output:

Bidder_Id	Bidder_name	Year	Month	Total_Points
129	Aryabhata Valimbe	2017	4	7
129	Aryabhata Valimbe	2017	4	7
129	Aryabhata Valimbe	2017	4	7
129	Aryabhata Valimbe	2017	4	7
129	Aryabhata Valimbe	2017	4	7
121	Aryabhatta Parachure	2017	4	6
124	Sackhcham Nayar	2017	4	6
124	Sackhcham Nayar	2017	4	6
124	Sackhcham Nayar	2017	4	6
121	Aryabhatta Parachure	2017	4	6
121	Aryabhatta Parachure	2017	4	6
130	Nawazuddin Saif	2017	5	6
130	Nawazuddin Saif	2017	5	6
130	Nawazuddin Saif	2017	5	6
130	Nawazuddin Saif	2017	5	6
104	Chatur Mahalanabis	2017	4	4
104	Chatur Mahalanabis	2017	4	4
118	Akshara Pandey	2017	4	4
110	Mishri Nayar	2017	4	4
110	Mishri Nayar	2017	4	4
108	Kusika Rajavade	2017	5	4
103	Megaduta Dheer	2017	5	4
104	Chatur Mahalanabis	2017	5	4





15.Write a query to get the top 3 and bottom 3 bidders based on the total bidding points for the 2018 bidding year.
Output columns should be:
like:
Bidder Id, Ranks (optional), Total points, Highest_3_Bidders --> columns contains name of bidder, Lowest_3_Bidders  --> columns contains name of bidder;

Query:
select * from ipl_bidder_points; 
select * from ipl_bidder_details;
SELECT *FROM (
SELECT pts.BIDDER_ID,pts.TOTAL_POINTS,
DENSE_RANK() OVER (ORDER BY pts.TOTAL_POINTS DESC) AS Ranks,
bdr.BIDDER_NAME,
'Highest_3_Bidders' AS Bidder_Type
FROM ipl_bidder_points pts
INNER JOIN ipl_bidder_details bdr ON pts.BIDDER_ID = bdr.BIDDER_ID
) AS temp WHERE Ranks <= 3
UNION ALL
SELECT * FROM (
SELECT pts.BIDDER_ID,
pts.TOTAL_POINTS,
RANK() OVER (ORDER BY pts.TOTAL_POINTS) AS Ranks,
bdr.BIDDER_NAME,
'Lowest_3_Bidders' AS Bidder_Type
FROM ipl_bidder_points pts
INNER JOIN ipl_bidder_details bdr ON pts.BIDDER_ID = bdr.BIDDER_ID
) AS temp2 WHERE Ranks <= 3;

Output:


Conclusion: 
This SQL query retrieves the top 3 and bottom 3 bidders based on the total bidding points for the year 2018.
 It calculates the total bidding points for each bidder and ranks them accordingly.
 The output includes bidder ID, total points, and the names of the top 3 and bottom 3 bidders.
Results are sorted by rank in descending order.


16.Create two tables called Student_details and Student_details_backup.
Table 1: Attributes 		                         Table 2: Attributes
Student id, Student name, mail id, mobile no.    	Student id, student name, mail id, mobile no.
Feel free to add more columns the above one is just an example schema.
Assume you are working in an Ed-tech company namely Great Learning where you will be inserting and modifying the details of the students in the Student details table. Every time the students changed their details like mobile number, You need to update their details in the student details table. Here is one thing you should ensure whenever the new students' details come , you should also store them in the Student backup table so that if you modify the details in the student details table,
you will be having the old details safely.You need not insert the records separately into both tables rather Create a trigger in such a way that 
It should insert the details into the Student back table when you inserted the student details into the student table automatically.
Query:

CREATE TABLE Student_details (
STUDENT_ID INT PRIMARY KEY,
STUDENT_NAME VARCHAR(25),
MAIL_ID VARCHAR(50) UNIQUE,
MOBILE_NUMBER VARCHAR(15) UNIQUE
);


CREATE TABLE Student_details_backup (
STUDENT_ID INT PRIMARY KEY,
STUDENT_NAME VARCHAR(25),
MAIL_ID VARCHAR(50) UNIQUE,
MOBILE_NUMBER VARCHAR(15) UNIQUE
);

-- Create trigger to insert details into Student_details_backup table
-- Step 2: Create the Trigger

DELIMITER //
CREATE TRIGGER Student_details_backup
AFTER INSERT ON Student_details
FOR EACH ROW
BEGIN
INSERT INTO Student_details_backup VALUES (NEW.STUDENT_ID, NEW.STUDENT_NAME,NEW.MAIL_ID,NEW.MOBILE_NUMBER);
END;
//
DELIMITER ;

INSERT INTO Student_details (STUDENT_ID, STUDENT_NAME, MAIL_ID, MOBILE_NUMBER) VALUES
(2, 'Alice Smith', 'alice@example.com', '2345658901'),
(3, 'Bob Johnson', 'bob@example.com', '3456789812'),
(4, 'Emma Brown', 'emma@example.com', '4567890623'),
(5, 'Michael Lee', 'michael@example.com', '5678901834'),
(6, 'Sarah Wilson', 'sarah@example.com', '6789012335'),
(7, 'David Miller', 'david@example.com', '7890123446'),
(8, 'Emily Davis', 'emily@example.com', '8901234565'),
(9, 'James Taylor', 'james@example.com', '9012345688'),
(10, 'Olivia Martinez', 'olivia@example.com', '0126456789'),
(11, 'Daniel Anderson', 'daniel@example.com', '2344678901'),
(12, 'Sophia Garcia', 'sophia@example.com', '3456739012'),
(13, 'Matthew Hernandez', 'matthew@example.com', '45677690123'),
(14, 'Chloe Lopez', 'chloe@example.com', '5678909234'),
(15, 'Jackson Gonzalez', 'jackson@example.com', '6789014345'),
(16, 'Ava Perez', 'ava@example.com', '7896123456'),
(17, 'Alexander Sanchez', 'alexander@example.com', '8905234567'),
(18, 'Mia Rivera', 'mia@example.com', '9012345478'),
(19, 'Ethan Scott', 'ethan@example.com', '0123426789'),
(20, 'Isabella Nguyen', 'isabella@example.com', '1234597890');

DELIMITER  //
CREATE TRIGGER Student_details_update_trigger
AFTER UPDATE ON Student_details
FOR EACH ROW
BEGIN
    -- Handle the update operation here
    -- For example, you might want to update the corresponding row in the backup table
    UPDATE Student_details_backup
    SET STUDENT_NAME = NEW.STUDENT_NAME,
        MAIL_ID = NEW.MAIL_ID,
        MOBILE_NUMBER = NEW.MOBILE_NUMBER
    WHERE STUDENT_ID = NEW.STUDENT_ID;
END; //

DELIMITER ;

UPDATE Student_details
SET MOBILE_NUMBER = "3546982311"
WHERE STUDENT_ID = 16;

UPDATE student_details
SET Mobile_NUMBER  = "63277822938"
WHERE STUDENT_ID = 5;

SELECT * FROM Student_details;
SELECT * FROM Student_details_backup;








